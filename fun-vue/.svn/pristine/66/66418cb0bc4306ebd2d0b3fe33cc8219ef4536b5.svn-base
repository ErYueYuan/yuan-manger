<template>
  <div class="t-center">
    <input type="file" style="z-index:8;" :id='uploadFileId' @change="upLoad"/>
  </div>
</template>

<script>
  let COS = require('cos-js-sdk-v5')
  import { api_system } from '@/api/index'
  import * as tool from '@/common/Tool'

  export default {
    name: "UploadFile",
    data () {
      return {
        fileArr: Object,
        uploadFileId: this.uploadId || 'uploadId'
      }
    },
    props: {
      uploadId: String,
      uploadOCR: String
    },
    methods: {
      upLoad () {
        console.log(this.fileArr)
        let fileObj = document.getElementById(this.uploadFileId).files[0]
        let blobFile = this.$options.methods.dataURLtoBlob.bind(this)(fileObj)
        let filename = fileObj.name
        this.$options.methods.uploadFile.bind(this)(blobFile, filename)
      },
      //上传腾讯云
      uploadFile (file, filename) {
        let bucket = tool.cos.bucketName //tool.globalData.bucket
        let appid = tool.cos.appid
        let region = tool.cos.region
        let folder = tool.cos.folder
        let uuid = tool.getUUID()
        let _that = this

        let cos = new COS({
          getAuthorization: function (options, callback) {
            api_system.cosGetSign({type: ''})
              .then(data => {
                callback({
                  TmpSecretId: data.tmpSecretId,
                  TmpSecretKey: data.tmpSecretKey,
                  XCosSecurityToken: data.token,
                  // 建议返回服务器时间作为签名的开始时间，避免用户浏览器本地时间偏差过大导致签名错误
                  StartTime: data.startTime, // 单位是秒
                  ExpiredTime: data.expiredTime,
                  ScopeLimit: true // 细粒度控制权限需要设为 true，会限制密钥只在相同请求时重复使用
                })
              })
          }
        })
        cos.putObject({
          Bucket: bucket + '-' + appid, /* 必须 */
          Region: region,     /* 存储桶所在地域，必须字段 */
          Key: folder + uuid + filename,             /* 必须 */
          StorageClass: 'STANDARD',
          Body: file, // 上传文件对象
          onProgress: function(progressData) {
            console.log(JSON.stringify(progressData))
          }
        }, function(err, data) {
          console.log(err || data)
          console.log(data)
          if(data.statusCode == '200'){
            _that.fileArr = {'enclosureName': filename, 'url': 'https://' + data.Location, 'id': _that.uploadFileId}
            if (_that.uploadOCR) {
              console.log('OCR识别')
              let _data = {
                ocrtype: _that.uploadOCR,
                cosPath: _that.fileArr.url
              }
              api_system.ekcMyProfileOCR(_data).then(res => {
                if (res.status == tool.rtCode.status) {
                  if (_that.uploadOCR == '1') { //身份证识别
                    _that.fileArr.ocrData = res.idCard
                  } else if (_that.uploadOCR == '3') { //银行卡识别
                    _that.fileArr.ocrData = res.bankCard
                  }
                  _that.$emit('uploadFile', _that.fileArr)
                }
              })
            } else {
              _that.$emit('uploadFile', _that.fileArr)
            }
            tool.toastMessage('恭喜,上传成功！')
          } else {
            tool.toastMessage('请求失败', 'error')
          }
        })
      },
      //DataURL转Blob
      dataURLtoBlob(fileObj) {
        console.log(fileObj.size)
        return new Blob([fileObj], { type: fileObj.type })
      },
    }
  }
</script>

<style scoped>
  .file-box{display: inline-block; width: 70px;position: absolute;overflow: hidden;right:0;}
  .file-ip{position: absolute; z-index: 1; top: 0; right: 0; bottom: 0; left: 0;opacity: 0; width:100%; height:100%;}
</style>

