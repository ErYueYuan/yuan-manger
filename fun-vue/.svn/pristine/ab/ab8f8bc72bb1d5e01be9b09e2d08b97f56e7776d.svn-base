<template>
  <div>
    <div class="fun-top-panel bg7  ">
      <div class="f2 c8 right">客户主页</div>
      <span class="mess-back " @click="goBack"><div class="cont"></div></span>
      <span class="title c3 f3 dblock2 t-center ">王佳佳</span>
    </div>
    <div class="chat-tag-box">
      <b>高级经理</b><b>标签</b><b>中产</b><b>中产</b><b>...</b>
      <div class="t-center c-p"><span class="down"></span></div>
    </div>

    <div class="chatting-wrapper">
      <div class="message-box" :class="item.senderFlag === '1' ? 'customer' : (item.senderFlag === '0' ? 'agent' : '')" v-for="(item, index) in messList" :key="index">
        <div class="time f2">{{item.modifydate | dataFormat('yyyy-MM-dd')}}<span> {{item.modifydate | dataFormat('hh:mm')}}</span></div>
        <div class="cont">
          <div class="img-box"><img src="@/assets/img/pic1.png" /></div>
          <div class="right-box">
            <h3 class="f1 c5">{{item.name}}</h3>
            <div class="f1 c5">{{item.content}}</div>
          </div>
        </div>
      </div>
    </div>
    <div class="chatting-footer b-shadow">
      <div class="floor1">
        <textarea placeholder="输入发送内容" v-model="sendMess"></textarea>
      </div>
      <div class="floor2">
        <label>
          短信<input type="checkbox"/><b></b>
        </label>
        <label>
          邮箱<input type="checkbox"/><b></b>
        </label>
        <label>
          公众号<input type="checkbox"/><b></b>
        </label>
        <label>
          企业微信<input type="checkbox"/><b></b>
        </label>
        <div class="submit-b">
          <button class="submit" @click.stop.prevent="messSubmit">发送</button>
        </div>
      </div>
      <div class="floor3">
        <div class="f1 c5 pad1-3">选择分享链接：</div>
        <div class="new-nav-box tools">
          <ul class="u0 clearfix">
            <li class="l2  f2 pad1 c-p">
              <span class="one"></span>团队
            </li>
            <li class="l2 f2 pad1 c-p">
              <span class="two"></span>业绩
            </li>
            <li class="l2 f2 pad1 c-p">
              <span class="three"></span>保单
            </li>
            <li class="l2 f2 pad1 c-p" >
              <span class="four"></span>会议签到
            </li>
            <li class="l2 f2 pad1 c-p">
              <span class="five"></span>团队
            </li>
            <li class="l2 f2 pad1 c-p">
              <span class="six"></span>业绩
            </li>
            <li class="l2 f2 pad1 c-p" >
              <span class="seven"></span>保单
            </li>
            <li class="l2 f2 pad1 c-p" >
              <span class="eight"></span>会议签到
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  import { mapGetters } from 'vuex'
  import * as tool from '@/common/Tool'
  import { api_mess } from '@/api/index'

  export default {
    name: "MessWindow",
    data () {
      return {
        id: this.$route.params.id,
        messList: [],
        sendMess: ''
      }
    },
    computed: {
      ...mapGetters(['user']),
    },
    created () {
      this.getMessWindowList()
    },
    methods: {
      getMessWindowList () {
        const _data = {
          saasId: tool.app.saasId,
          userId: this.id
        }
        api_mess.getOneTalkList(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.messList = data.funRealTimeMessageDTOList
          }
        })
      },
      messSubmit () {
        if (!this.sendMess) return tool.toastMessage('发送内容不能为空，请重新输入')
        const _data = {
          toUserName: 'gh_6d00731ae47d',
          fromUserName: this.id, // 发送消息用户openid
          createTime: new Date().getTime(), // 发送时间
          msgType: 'text', // 消息类型
          content: this.sendMess, // 文本消息内容
          appId: tool.app.appId
        }
        api_mess.readTimeWindow(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.sendMess = ''
            this.getMessWindowList()
            tool.toastMessage('发送成功')
          } else {
            tool.toastMessage(data.message, 'error')
          }
        })
      },
      goBack () {
        this.$router.back()
      }
    }
  }
</script>

<style scoped>

</style>
