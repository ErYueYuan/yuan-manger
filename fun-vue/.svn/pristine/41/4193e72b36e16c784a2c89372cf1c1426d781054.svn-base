let request = require('request')
/**
 * @description 服务器部署配置信息
 * @param null
 * baseUrl：请求后台接口路径；ekBaseUrl：供node调用路径；appRootUrl,secret：企业微信密钥信息
 * 注：EK后台GET请求为params入参方式。
 */
let baseUrl, _url, options,
  fzgBaseUrl = 'http://10.2.3.102:8083/',//后台接口地址
  rgBaseUrl = 'http://10.2.3.238:9081/',
  lmBaseUrl = 'http://172.16.5.50/lmapi/',
  staticBaseUrl = 'http://10.2.3.144:8098/',
  channelsBaseUrl = 'http://10.2.5.55:8080/',
  cbsBaseUrl = 'http://172.16.2.155/lmapi/',
  fzgNewBaseUrl = 'http://10.2.3.144:8099/',
  fzgZdBaseUrl = 'http://10.2.3.155:9088/',
  sxtBaseUrl = 'http://ts.sxtong.cn/',
  amendPass = 'http://core.cninsure.net/mobileapi/'
  fzgjhs = 'http://10.2.3.228:8080/'
  fzgarea = 'http://10.2.3.230:8080/'
module.exports = {
  appRootUrl: "https://e-dev.cninsure.net",
  appid: "wx37ce8f6b35724cc1",
  secret: "769ce389e85d23da33c7f959379f904c",
  fetch: function (rq, res, method, type, uri, data, cb) {
    switch (type) {
      case 'fzg':
        baseUrl = fzgBaseUrl
        break;
      case 'rg':
        baseUrl = rgBaseUrl
        break;
      case 'lm':
        baseUrl = lmBaseUrl
        break;
      case 'static':
        baseUrl = staticBaseUrl
        break;
      case 'channels':
        baseUrl = channelsBaseUrl
        break;
      case 'cbs':
        baseUrl = cbsBaseUrl
        break;
      case 'fzgnew':
        baseUrl = fzgNewBaseUrl
        break;
      case 'fzgzd':
        baseUrl = fzgZdBaseUrl
        break;
      case 'sxt':
        baseUrl = sxtBaseUrl
        break;
      case 'amendPass':
        baseUrl = amendPass
      case 'jhs':
        baseUrl = fzgjhs
        break;
      case 'area':
        baseUrl = fzgarea
        break;
      default:
        baseUrl = ''
    }
    if (method == 'GET') {
      data = {
        _t: Date.parse(new Date()) / 1000,
        ...data
      }
      _url = baseUrl + uri + '/' + (data.type ? data.type : '')
    } else {
      _url = baseUrl + uri
    }
    options = {
      headers: {
        'token': rq.headers['token'] ? rq.headers['token'] : '',
        'sfId': rq.headers['sfId'] ? rq.headers['sfId'] : '',
        'openid': rq.headers['openid'] ? rq.headers['openid'] : ''
      },
      url: _url,
      method: method,
      json: true,
      body: data
    }
    let callback = function (error, response, rt) {
      if (!error && response.statusCode == 200) {
        console.log('\n' + '============出参success=================' + '\n' + uri + ' .response:', rt)
        if (typeof cb === 'function') {
          try {
            cb(JSON.parse(rt));
          } catch (e) {
            cb(rt);
          }
        } else {
          try {
            res.send(JSON.parse(rt));
          } catch (e) {
            res.send(rt);
          }
        }
      } else {
        console.log('\n' + '============出参error=================' + '\n' + uri + ' .response:', rt)
        if (response && response.statusCode) {
          res.send(rt);
        } else {
          res.sendStatus(401)
        }
      }
    }
    console.log('\n' + '============入参==============' + '\n' + 'options', options)
    request(options, callback)
  },
  fetch_wx: function (rq, res, uri, cb) {
    let options = {
      url: uri,
      method: 'GET',
      json: true
    }
    let callback = function (error, response, rt) {
      if (!error && response.statusCode == 200) {
        console.log('\n' + '===========================' + '\n' + uri + ' .response:', rt)
        if (typeof cb === 'function') {
          try {
            cb(JSON.parse(rt))
          } catch (e) {
            cb(rt)
          }
        } else {
          try {
            res.send(JSON.parse(rt))
          } catch (e) {
            res.send(rt)
          }
        }
      } else {
        res.send('<html><body><h1>' + error + '</h1></body></html>')
      }
    }
    console.log('\n' + '============================' + '\n' + 'options', options)
    request(options, callback)
  }
}

