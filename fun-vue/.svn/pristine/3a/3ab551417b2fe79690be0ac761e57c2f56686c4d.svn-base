<template>
  <div>
    <div v-show="!replyPopStatus">
      <div class="fun-top-panel bg7  ">
        <div class="f2 c8 right" @click="$router.push({name: 'customerDetail', params: {q:params.cid, r:customerInfo.resultId}})" v-if="params.messType === 'public'">客户主页</div>
        <span class="mess-back " @click="goBack"><div class="cont"></div></span>
        <span class="title c3 f3 dblock2 t-center " v-if="customerInfo">{{customerInfo.nikeName || customerInfo.nickname}}</span>
      </div>
      <div class="chat-tag-box" :class="tagStatus ? 'more' : ''" v-if="!params.GCid">
        <b v-for="(tags, index) in tagsListDown" :key="'tags-' + index" v-show="!tagStatus">{{tags}}</b><b v-show="tagsList.length>3&&!tagStatus">...</b>
        <b v-for="(tags, index) in tagsList" :key="'tags' + index" v-show="tagStatus">{{tags}}</b>
        <div class="t-center c-p" @click="handleTagMore" v-if="tagsList.length>3"><span :class="tagStatus ? 'up' : 'down'"></span></div>
      </div>

      <div class="chat-tag-box c4 pad1-2" v-if="params.GCid">
          <div class="f2-1">您将发送消息给{{groupChatList.length || 0}}位客户</div>
          <div class="mess f2">
            <span class="bl" v-for="(item, index) in groupChatList" :key="'gc-'+index">{{item.nickName}}</span>
          </div>
      </div>

      <div class="chatting-wrapper" id="roll_top" :class="fileStatus?'open':''">
        <van-pull-refresh v-model="isLoading" :success-text="refreshText" @refresh="onRefresh">
          <div class="message-box" :class="item.senderFlag === '1' || item.sedType === '1' ? 'customer' : (item.senderFlag === '0' || item.sedType === '0' ? 'agent' : '')" v-for="(item, index) in messList" :key="index">
            <div class="time f2" v-if="item.modifydate || item.sendTime">{{item.sendTime || item.modifydate.split('.')[0] | dataFormat('yyyy-MM-dd')}}<span> {{item.sendTime || item.modifydate.split('.')[0] | dataFormat('hh:mm')}}</span></div>
            <div class="cont">
              <div class="img-box"><img :src="params.messType === 'public' ? (item.senderFlag === '1' ? item.head : user.head) : (params.messType === 'qyWx' ? (item.sedType === '1' ? fHead : user.head) : '')" /></div>
              <div class="right-box">
                <h3 class="f1 c5">{{item.name || item.nickname}}</h3>
                <div class="f1 c6 wrap">{{item.content || item.messageContent}}</div>
              </div>
            </div>
          </div>
        </van-pull-refresh>
      </div>
      <div class="chatting-footer b-shadow">
        <div class="floor1 d-flex">
          <div class="voice"><b title="语音"></b></div>
          <div class="chat"><textarea placeholder="输入发送内容" v-model="sendMess"></textarea></div>
          <div class="other"><b class="b1" title="表情图标"></b><b class="b2" title="附件" @click="otherFile"></b></div>
        </div>
        <div class="floor2 posi2">
          <label>短信<input type="checkbox"/><b></b></label>
          <label>邮箱<input type="checkbox"/><b></b></label>
          <label>公众号<input type="checkbox"/><b></b></label>
          <label>企业微信<input type="checkbox"/><b></b></label>
          <div class="submit-b">
            <button class="submit" @click="messSubmit">发送</button>
          </div>
        </div>
        <div class="floor3" :class="!fileStatus?'hide':''"><!--选择分享链接默认收起-->
          <div class="f1 c5 pad1-3">选择分享链接：</div>
          <div id="chatShare" class="swiper-container ">
            <div class="swiper-wrapper">
              <div class="swiper-slide ">
                <div class="new-nav-box tools">
                  <ul class="u1 clearfix">
                    <li class="l2  f2 pad1 c-p" @click="handleSendMess('reply')">
                      <span class="c1"></span>快捷回复
                    </li>
                    <li class="l2 f2 pad1 c-p" @click="handleSendMess('repos')">
                      <span class="three"></span>知识库
                    </li>
                    <li class="l2 f2 pad1 c-p">
                      <label for="upLoadPhoto">
                        <span class="c2"></span>图片
                        <upload-file
                          ref="upLoadPhoto"
                          :upload-id="upLoadPhoto"
                          style="display:none;"
                          @iptFile="iptFileFun"
                        />
                      </label>
                    </li>
                    <li class="l2 f2 pad1 c-p" @click="sendSharePath('productList')">
                      <span class="four"></span>产品
                    </li>
                    <li class="l2 f2 pad1 c-p" @click="sendSharePath('proposalList')">
                      <span class="five"></span>计划书
                    </li>
                    <li class="l2 f2 pad1 c-p" >
                      <span class="seven"></span>海报
                    </li>
                    <li class="l2  f2 pad1 c-p" @click="sendSharePath('articleList')">
                      <span class="one"></span>文章
                    </li>
                    <li class="l2 f2 pad1 c-p">
                      <span class="six"></span>名片
                    </li>
                  </ul>
                </div>
              </div>
              <div class="swiper-slide ">
                <div class="new-nav-box tools">
                  <ul class="u1 clearfix">
                    <li class="l2 f2 pad1 c-p">
                      <span class="two"></span>风险测评
                    </li>
                    <li class="l2 f2 pad1 c-p">
                      <span class="three"></span>资产配置
                    </li>
                    <li class="l2 f2 pad1 c-p" >
                      <span class="eight"></span>微店
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="swiper-pagination"></div>
          </div>
        </div>
      </div>
    </div>
    <fast-reply v-if="replyPopStatus=='reply'" @sendFastReply="sendMessFun"></fast-reply>
    <repository v-if="replyPopStatus=='repos'" repositoryPath="repos" @sendRepository="sendMessFun"></repository>
  </div>
</template>

<script>
  import Vue from 'vue'
  import { mapGetters } from 'vuex'
  import * as tool from '@/common/Tool'
  import { api_mess, api_sell } from '@/api/index'
  import { UploadFile } from '@/components/index'
  import { PullRefresh } from 'vant'
  import Swiper from 'swiper'
  import 'swiper/css/swiper.min.css'
  import 'swiper/js/swiper.min.js'
  import DataSource from '@/common/DataSource'
  import Vd from '@/common/Validator'
  import FastReply from './FastReply'
  import Repository from '../my/Repository'

  Vue.use(PullRefresh)

  export default {
    name: "MessWindow",
    data () {
      return {
        pid: this.$route.params.p,
        params: {},
        messList: [],
        sendMess: '',
        sendPhoto: '',
        fileStatus: false,
        upLoadPhoto: 'upLoadPhoto',
        sendProductMess: DataSource.get('sendProductMess', 2) || '',
        sendProposalMess: DataSource.get('sendProposalMess', 2) || '',
        sendArticleMess: DataSource.get('sendArticleMess', 2) || '',
        fHead: DataSource.get('fHead', 2) || '',
        sendReplyMess: '',
        tagStatus: false,
        tagsListDown: [],
        tagsList: [], // 标签列表
        replyPopStatus: '',
        isLoading: false,
        refreshText: '',
        talkNum: DataSource.get('talkNum', 1),
        customerInfo: {},
        page: 1, // 企业微信消息分页
        total: 0,
        groupChatList: [], // 微信群发好友列表
      }
    },
    computed: {
      ...mapGetters(['user']),
    },
    components: {
      'upload-file': UploadFile,
      'fast-reply': FastReply,
      'repository': Repository
    },
    beforeCreate: function() {
      document.getElementsByTagName("body")[0].className = "bg3";
    },
    created () {
      this._params = this.pid.split('&')
      if (this._params && this._params.length > 0) {
        for (let e of this._params) {
          this.params[e.split('=')[0]] = e.split('=')[1]
        }
      }
      console.log(this.params)
      this.sendMessStatus() // 查询是否是要发送状态
      if (this.params.messType && this.params.messType === 'public') {
        this.getMessWindowList()
        if (this.talkNum != 0) {
          this.customerTalkEdit() // 客户红点更新
        }
        this.queryBasicIntroduction() // 客户详情
      } else if (this.params.messType && this.params.messType === 'qyWx') {
        if (this.params.GCid && this.params.GCid == '1') { // 创建群聊
          this.groupChatList = DataSource.get('groupChat', 2) || []
          this.customerInfo.nickname = '群发'
        } else {
          this.getWxChatMessWindowList()
          if (this.params.fid) {
            this.getWxChatFriendInfo()
          } else if (this.params.gid) {
            this.customerInfo.nickname = DataSource.get('groupName', 2)
          }
        }
      }
      this.$options.sockets.onmessage = (data) => this.messageReceived(data)
    },
    methods: {
      initSwiper () {
        this.$nextTick(() => {
          const swiper = new Swiper('.swiper-container', {
            pagination: {
              el: '.swiper-pagination',
            },
          });
        })
      },
      customerTalkEdit () {
        const _data = {
          clientId: this.params.cid,
          saasId: tool.app.saasId,
          appId: this.params.aid
        }
        api_mess.customerTalkEdit(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.getUserMessNumber()
          }
        })
      },
      getUserMessNumber () {
        const _data = {
          saasId: tool.app.saasId,
          userId: this.user.userInfo.userId || ''
        }
        api_mess.readTimeTalkNum(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            const userMess = {
              messConversation : data.talkNum
            }
            DataSource.set('userMess', userMess, 1)
            tool.setUserMess(userMess)
          }
        })
      },
      // 公众号客户基本信息
      queryBasicIntroduction () {
        const _data = {
          saasId: tool.app.saasId,
          clientId: this.params.cid
        }
        api_sell.queryBasicIntroduction(_data).then(data => {
          if (data.status == tool.rtCode.status) {
            this.customerInfo = data
            this.getUserTags()
          } else {
            tool.toastMessage(data.message, 'error')
          }
        })
      },
      sendMessStatus () {
        if (this.sendProductMess) {
          this.sendMess = this.sendProductMess
        } else if (this.sendProposalMess) {
          this.sendMess = this.sendProposalMess
        } else if (this.sendArticleMess) {
          this.sendMess = this.sendArticleMess
        }
        if (this.sendMess) {
          this.messSubmit()
        }
      },
      getUserTags () {
        const _data = {
          resultId: this.customerInfo.resultId,
          saasId: tool.app.saasId
        }
        api_sell.queryCustomerPortrait(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.tagsList = data.tagsName || []
            if (this.tagsList && this.tagsList.length>3) {
              this.tagsListDown = this.tagsList.slice(0, 3)
            } else {
              this.tagsListDown = this.tagsList
            }
          }
        })
      },
      getMessWindowList () {
        const _data = {
          saasId: tool.app.saasId,
          clientId: this.params.cid,
          appId: this.params.aid
        }
        api_mess.getOneTalkList(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.messList = data.funRealTimeMessageDTOList
            this.handleScroll()
          }
        })
      },
      messSubmit () {
        if (Vd.required(this.sendMess, '发送内容不能为空，请重新输入')) {
          if (this.params.messType === 'public') {
            const _data = {
              toUserName: this.params.oid,
              fromUserName: this.params.aid,
              createTime: new Date().getTime(), // 发送时间
              msgType: 'text', // 消息类型
              picUrl: this.sendPhoto,
              content: this.sendMess, // 文本消息内容
              appId: this.params.aid
            }
            api_mess.readTimeWindow(_data).then(data => {
              if (data.status === tool.rtCode.status) {
                this.sendSuccess()
              } else {
                tool.toastMessage(data.message, 'error')
              }
            })
          } else {
            if (this.params.GCid && this.params.GCid == '1') {
              for (let it of this.groupChatList) {
                this.customerInfo.wechatId = it.weChatId
                this.messSubmitWeChat()
              }
            } else {
              this.messSubmitWeChat()
            }

          }
        }
      },
      messSubmitWeChat () {
        const _data = {
          operationWechatId: this.params.wid, // 运营号ID
          operatorId: this.user.operatorManageInfo.id, // 运营者ID
          messageType: '10001', // 消息类型
          wechatId: this.customerInfo.wechatId, // 微信号id
          messageContent: this.sendMess,
          chatType: this.params.GCid || this.params.fid ? '0' : (this.params.gid ? '1' : ''), // 聊天类型：0-与好友聊天；1-与群组聊天
        }
        if (this.params.fid) {
          _data.friendId = this.params.fid
        } else if (this.params.gid) {
          _data.platformGid = this.params.gid
        }
        api_mess.chatMessageAdd(_data).then(res => {
          if (res.code == '200') {
            if (this.params.GCid && this.params.GCid == '1') {
              this.$router.back()
            } else {
              this.sendSuccess()
            }
          } else {
            tool.toastMessage(res.msg, 'error')
          }
        })
      },
      sendSuccess () {
        this.sendMess = ''
        if (this.params.messType === 'public') {
          this.getMessWindowList()
        } else if (this.params.messType === 'qyWx') {
          this.getWxChatMessWindowList('send')
        }
        if (this.sendProductMess) {
          DataSource.del('sendProductMess', 2)
          this.sendProductMess = ''
        } else if (this.sendProposalMess) {
          DataSource.del('sendProposalMess', 2)
          this.sendProposalMess = ''
        } else if (this.sendArticleMess) {
          DataSource.del('sendArticleMess', 2)
          this.sendArticleMess = ''
        }
        tool.toastMessage('发送成功')
      },
      handleTagMore () {
        if (this.tagsList.length > 3) {
          this.tagStatus = !this.tagStatus
        }
      },
      otherFile () {
        this.fileStatus = !this.fileStatus
        this.initSwiper()
        this.handleScroll()
      },
      handleSendMess (type) {
        this.fileStatus = false
        this.replyPopStatus = type
      },
      sendSharePath (path) {
        switch (path) {
          case 'productList':
            DataSource.set('messPath', 'messWindow', 2)
            this.$router.push({path: '/' + path})
            break;
          default:
            this.$router.push({path: '/' + path + '/2'})
        }
      },
      handleScroll () { // 进来第一次定位
        this.$nextTick(() => {
          let messWin = document.getElementsByClassName('chatting-wrapper')[0],
            messBox = document.getElementsByClassName('message-box'),
            messHeight = 0
          for (let it of messBox) {
            messHeight += it.offsetHeight
          }
          messHeight = messHeight > 100 ? messHeight-100 : 0
          messWin.scrollTop = messHeight
        })
      },
      handleRefreshScroll (num) { // 下拉定位
        this.$nextTick(() => {
          let messWin = document.getElementsByClassName('chatting-wrapper')[0],
            messBox = document.getElementsByClassName('message-box'),
            messHeight = 0
          for (let ind in messBox) {
            if (ind >= num) { // num 是此次更新多少条
              break
            }
            messHeight += messBox[ind].offsetHeight
          }
          messWin.scrollTop = messHeight
        })
      },
      onRefresh() { // 上拉加载
        if (this.messList.length < this.total) {
          if (this.params.messType && this.params.messType === 'public') {
            const _data = {
              saasId: tool.app.saasId,
              userId: this.params.cid,
              appId: this.params.aid
            }
            api_mess.getOneTalkList(_data).then(data => {
              if (data.status === tool.rtCode.status) {
                this.messList = this.messList.concat(data.funRealTimeMessageDTOList)
                this.handleRefreshScroll()
                this.refreshText = '刷新成功'
                this.isLoading = false
              }
            })
          } else if (this.params.messType && this.params.messType === 'qyWx') {
            this.page += 1
            this.getWxChatMessWindowList()
          }
        } else {
          this.refreshText = '刷新已到底'
          this.isLoading = false
        }
      },
      goBack () {
        DataSource.del('talkNum', 1)
        this.$router.back()
      },
      iptFileFun (params) {
        console.log(params)
        if (params && params.url) {
          this.sendPhoto = params.url
          this.messSubmit()
        }
      },
      sendMessFun (params) {
        this.replyPopStatus = ''
        if (params && params.content) {
          if (this.params.messType === 'public') {
            this.sendMess = params.content.replace(/<span class="c8">客户昵称<\/span>/g, this.customerInfo.nikeName)
          } else if (this.params.messType === 'qyWx') {
            this.sendMess = params.content.replace(/<span class="c8">客户昵称<\/span>/g, this.customerInfo.nickname)
          }
          this.messSubmit()
        }
      },

      /****** 企业微信好友函数 ******/
      //获取企业微信消息
      getWxChatMessWindowList (type) {
        let _data = {
          page: this.page,
          size: 20,
          query: {
            operationWechatId: this.params.wid
          }
        }
        if (this.params.fid) {
          _data.query.friendId = this.params.fid
          api_mess.friendChatMessageInfo(_data, {showLoadingFlag: 'N'}).then(res => {
            if (res.code == '200') {
              if (type && type === 'send') {
                this.messList = res.rows.reverse()
                this.total = res.total
                this.handleScroll()
              } else {
                this.organizeMessageList(res)
              }
            } else {
              tool.toastMessage(res.msg, 'error')
            }
          })
        } else if (this.params.gid) {
          _data.query.platformGid = this.params.gid
          api_mess.groupMessageInfo(_data).then(res => {
            if (res.code == '200') {
              console.log(res)
              this.organizeMessageList(res)
            } else {
              tool.toastMessage(res.msg, 'error')
            }
          })
        }
      },
      organizeMessageList (res) {
        if (this.total === 0 || this.messList.length === 0) {
          this.messList = res.rows.reverse()
          this.handleScroll()
        } else {
          let num = res.rows.length
          this.messList = this.messList.concat(res.rows.reverse())
          this.handleRefreshScroll(num)
        }
        this.total = res.total
      },
      // 查企业微信好友信息
      getWxChatFriendInfo () {
        api_mess.getFriendInfo({type: this.params.fid || this.params.gid}).then(res => {
          if (res.code == '200') {
            this.customerInfo = res.data
          } else {
            tool.toastMessage(res.msg, 'error')
          }
        })
      },
      messageReceived: function (raw_message) {
        console.log(raw_message)
        let res = JSON.parse(raw_message.data)
        console.log(res)
        if (this.params.fid) {
          if (res && res.data && res.data[0].friendMessage && res.data[0].friendMessage.friendId == this.params.fid) {
            this.getWxChatMessWindowList('send')
          }
        } else {

        }
      },
    },
    beforeDestroy: function() {
      this.customerTalkEdit()
      document.body.removeAttribute("class", "bg3")
    },
  }
</script>

<style scoped>
  .wrap{word-wrap:break-word;word-break:break-all;}
  .van-pull-refresh{min-height: 100%;}
  .bl{display: inline-block; padding: 0 5px;width: auto;height: 18px;line-height: 18px;border: none;}
</style>
