<template>
    <div class="bg7">
        <div class="fun-top-panel bg-my  ">
            <span class="mess-back " @click="goBack()"><div class="cont-wh"></div></span>
            <span class="title c7 f4 dblock2 t-center ">个人信息</span>
        </div>

        <div class="main-container mar1  clearfix">
            <top-panel :customerBaseInfo="customerBaseInfo" :customerResultId="customerResultId"></top-panel>

            <div class="posi2 mar3-5 bg7  bg7 b-radius1">
                <section class=" pad1-3  ">
                    <div id="proNav" class="swiper-container border-b1">
                        <div class="swiper-wrapper f-flex" style="overflow-x: scroll;">
                            <van-tabs title-active-color="#ee0a24" v-model="active" @click="handleClickTag">
                                <van-tab
                                    :scrollspy="true"
                                    v-for="(article, index) in tabList"
                                    :key="index"
                                    :title="article.tagName">
                                </van-tab>
                            </van-tabs>
                        </div>
                    </div>

                    <div>
                        <section class="mar3-2">
                            <div class="b-sh1  pad1-3 bg7  mar7-3">
                                <div class="stu-tracks3 posi2 mar5">
                                    <ul class="border-b1"   v-for="(item, index) in funFollowUpDTOList" :key="index">
                                        <li class="border-b1">
                                            <div class="top f2 c8">{{item.followTime.split('.')[0]  | dataFormat('yyyy-MM-dd hh:mm:ss')}}<span class="f-right ek-btn-7 f1 c-p" @click="editRecord(item.followUpId)">编辑跟进记录</span></div>
                                            <div class=" blk  posi2 ">
                                                <div class="f2 cont "><span class="tit">跟进内容：</span><span class="txt">{{item.followContent}}</span></div>
                                                <div class="f2 cont "><span class="tit">需求评估：</span><span class="txt">{{!!item.tagName ? item.tagName : '暂无'}}</span></div>
                                                <div class="f2 cont "><span class="tit">跟进结果：</span><span class="txt">{{item.followUpResult}}</span></div>
                                                <div class="f2 cont ">
                                                    <span class="tit">回访时间：</span>
                                                    <span class="txt" v-if="!!item.callbackTime">{{item.callbackTime.split('.')[0] | dataFormat('yyyy-MM-dd hh:mm:ss')}}</span>
                                                    <span class="txt" v-if="!item.callbackTime">暂无</span>
                                                </div>
                                                <div class="f2 cont "><span class="tit">回访内容：</span><span class="txt">{{item.callbackContent}}</span></div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <van-empty v-show="total===0" description="暂无跟进记录" />
                            <div class="f2 pad888" v-if="funFollowUpDTOList.length>=total && funFollowUpDTOList.length>0">
                                <div class="lzg-h-more posi2 t-center">
                                    <span class="c5 bg7 posi2 c222">没有更多啦</span>
                                </div>
                            </div>
                        </section>
                    </div>

                </section>
            </div>
        </div>

        <footer-panel :customerResultId="customerResultId" :customerBaseInfo="customerBaseInfo" :customerDetail="customerDetail" ></footer-panel>
    </div>
</template>
<script>
    import Vue from 'vue'
    import { mapGetters } from 'vuex'
    import * as tool from '@/common/Tool'
    import { api_sell } from '@/api/index'
    import DataSource from '@/common/DataSource'
    import '@vant/touch-emulator'
    import { Popup, Picker, Tab, Tabs, Empty } from 'vant'
    import * as scroll from '@/common/Scroll'
    import { CustomerTopPanel } from '@/components/index'
    import { CustomerFooterPanel } from '@/components/index'

    Vue.use(Popup)
    Vue.use(Picker)
    Vue.use(Tab)
    Vue.use(Tabs)
    Vue.use(Empty)

    export default {
        name: "followList",
        data () {
            return {
                customerClientId: this.$route.params.q,
                customerResultId: this.$route.params.r,
                customerBaseInfo: {},
                customerDetail: {},
                funFollowUpDTOList: [],//跟进列表
                tabList: [
                    {
                        id: '0',
                        innerCode: '0',
                        tagName: '基本信息'
                    },
                    {
                        id: '1',
                        innerCode: '1',
                        tagName: '订单'
                    },
                    {
                        id: '2',
                        innerCode: '2',
                        tagName: '轨迹'
                    },
                    {
                        id: '3',
                        innerCode: '3',
                        tagName: '跟进'
                    },
                    {
                        id: '4',
                        innerCode: '4',
                        tagName: '历史方案'
                    },
                    {
                        id: '5',
                        innerCode: '5',
                        tagName: '已购产品'
                    }
                ],
                tagIndex: '0',
                active: 3,
                total: 0,
                isLoad: true,
                allLoaded: false,
                queryLoading: true,
                offset: 0,
                limit: 10,
            }
        },
        computed: {
            ...mapGetters(['user']),
        },
        components: {
            'top-panel': CustomerTopPanel,
            'footer-panel': CustomerFooterPanel,
        },
        beforeCreate: function() {
            document.getElementsByTagName("body")[0].className = "bg3";
        },
        created () {
            this.queryBasicIntroduction();//基本介绍
            this.queryFollowUpList();//跟进列表查询
        },
        mounted () {
            window.addEventListener('scroll', this.handleScroll)
        },
        methods: {
            handleScroll() {
                if (scroll.getScrollTop() + scroll.getClientHeight() > (scroll.getScrollHeight() - 5)) {
                    this.loadMore();
                }
            },
            loadMore() {
                if (this.queryLoading) {
                    return
                }
                if (!this.isLoad) {
                    this.isLoad = true;
                    this.offset += 10;
                    this.funFollowUpDTOList();
                }
            },

            handleClickTag (index, title) {
                this.tagIndex = this.tabList[index].innerCode
                this.offset = 0;
                if (this.tagIndex == '0') {
                    this.$router.push({ name: 'customerDetail',params: {
                        q: this.customerClientId,
                        r: this.customerResultId
                    } })
                } else if (this.tagIndex == '1') {
                    this.$router.push({ name: 'orderList',params: {
                        q: this.customerClientId,
                        r: this.customerResultId
                    } })
                } else if (this.tagIndex == '2') {
                    this.$router.push({ name: 'trailList',params: {
                        q: this.customerClientId,
                        r: this.customerResultId
                    } })
                } else if (this.tagIndex == '4') {
                    this.$router.push({ name: 'historyList',params: {
                        q: this.customerClientId,
                        r: this.customerResultId
                    } })
                } else if (this.tagIndex == '5') {
                    this.$router.push({ name: 'payProductList',params: {
                        q: this.customerClientId,
                        r: this.customerResultId
                    } })
                }
            },

            queryBasicIntroduction () {
                const _data = {
                    saasId: tool.app.saasId,
                    clientId: this.customerClientId
                }
                api_sell.queryBasicIntroduction(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.customerBaseInfo = data;
                        this.getCustomerDetail(data.clientNewId);
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            queryFollowUpList () {
                const _data = {
                    agentUserId: this.user.userInfo.userId,
                    saasId: tool.app.saasId,
                    resultId: this.customerResultId,
                    limit: this.limit,
                    offset: this.offset
                }
                api_sell.queryFollowUpList(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.isLoad = false;
                        this.total = data.total;
                        if (this.offset === 0 || this.funFollowUpDTOList.length === 0) {
                            this.funFollowUpDTOList = data.funFollowUpDTOList ? data.funFollowUpDTOList : []
                            if (this.funFollowUpDTOList.length < this.total) {
                                this.queryLoading = false;
                            }
                        } else {
                            this.funFollowUpDTOList = this.funFollowUpDTOList.concat(data.funFollowUpDTOList);
                        }
                        this.allLoaded = this.funFollowUpDTOList.length >= this.total;
                        if (this.allLoaded) {
                            this.queryLoading = true;
                        }
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            getCustomerDetail (clientNewId) {
                const _data = {
                    saasId: tool.app.saasId,
                    clientNewId: clientNewId
                }
                api_sell.getCustomerDetail(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.customerDetail = data.customerDetail;
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            editRecord (followUpId) {
                this.$router.push({ name: 'followRecord',params: {// clientId,resultId,followUpId,add
                    p: this.customerClientId,
                    q: this.customerResultId,
                    r: followUpId,
                    s: 'edit'
                } })
            },

            goBack () {
                this.$router.push({ name: 'sellList',params: {
                    q: '1'
                } })
            },

        },
        beforeDestroy: function() {
            document.body.removeAttribute("class", "bg3");
        },
        destroyed() {
            window.removeEventListener('scroll', this.handleScroll)
        },
    }
</script>
<style scoped>

</style>
