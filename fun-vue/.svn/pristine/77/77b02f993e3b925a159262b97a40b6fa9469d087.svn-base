<template>
    <div class="bg3">
        <div class="fun-top-panel bg7" @click="goBack()">
            <span class="mess-back "><div class="cont"></div></span>
            <span class="title c3 f3 dblock2 t-center ">添加家庭成员</span>
        </div>
        <div class="main-container mar3-7 no-bot clearfix" style="padding-bottom: 220px;">
            <section class="b-radius3  bg7 mar3-2">
                <dl id="relation" class="per-box52   border-b" @click="showPopup()">
                    <dt class="c6 f3-1">关系</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.relationName"></dd>
                </dl>
                <dl class="per-box52   border-b">
                    <dt class="c6 f3-1">姓名</dt>
                    <dd class="t-right f3 c6 clearfix"><input type="text" class="ca-input w2 t-right" placeholder="请输入" v-model="familyList.name"><span class="f-right insure-icon icon-addr mar1-2" title=""></span></dd>
                </dl>
                <!-- <div class="error-alert mr" title="错误提示">姓名不能包含数字</div> -->
                <dl class="per-box52   border-b">
                    <dt class="c6 f3-1">手机号码</dt>
                    <dd class="t-right c6 f3 c2"><input type="text" class="ca-input t-right" placeholder="请输入" v-model="familyList.mobile"></dd>
                </dl>
                <dl class="per-box52   border-b">
                    <dt class="c6 f3-1">性别</dt>
                    <dd class="t-right f3 ">
                        <div class="f-right pad4 t-left">
                            <label class="reg-sel-btn posi2">
                                <input type="radio" name="a" v-model="familyList.sex" @change="chooseMan">
                                <b class="btn">男</b>
                            </label>
                        </div>
                        <div class="f-right pad4 t-left">
                            <label class="reg-sel-btn posi2">
                                <input type="radio" name="a" v-model="familyList.sex" @change="chooseWoman">
                                <b class="btn">女</b>
                            </label>
                        </div>
                    </dd>
                </dl>
                <dl class="per-box52   border-b" @click="showDate('birthday')">
                    <dt class="c6 f3-1">出生日期</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.birthday"></dd>
                </dl>
                <dl class="per-box52   border-b">
                    <dt class="c6 f3-1">年龄</dt>
                    <dd class="t-right c6 f3 c2"><input type="text" class="ca-input t-right" placeholder="请输入" disabled v-model="familyList.age"></dd>
                </dl>
                <dl id="country" class="per-box52   border-b" @click="showCountryPopup()">
                    <dt class="c6 f3-1">国籍</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.countryName"></dd>
                </dl>
                <dl id="marry" class="per-box52   " @click="showMarryPopup()">
                    <dt class="c6 f3-1">婚姻</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.marryName"></dd>
                </dl>
                <dl id="cerValidDateType" class="per-box52   border-b  border-t" @click="showDateType()">
                    <dt class="c6 f3-1">证件有效期类型</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.cerValidDateTypeName"></dd>
                </dl>
                <dl class="per-box52   border-b" v-show="isEndDate" @click="showEndDate('endDate')">
                    <dt class="c6 f3-1">证件有效期止期</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.cerValidDate"></dd>
                </dl>
                <dl id="certype" class="per-box52   border-b" @click="showCertypePopup()">
                    <dt class="c6 f3-1">证件类型</dt>
                    <dd class="t-right c6 f3 c2 arrow"><input type="text" class="ca-input t-right" placeholder="请选择" disabled :value="familyList.cerTypeName"></dd>
                </dl>
                <dl class="per-box52   border-b">
                    <dt class="c6 f3-1">证件号码</dt>
                    <dd class="t-right f3 c6 clearfix"><input type="text" class="ca-input t-right" placeholder="请输入" v-model="familyList.cerCode"><span class="f-right insure-icon icon-addr mar1-2" title=""></span></dd>
                </dl>
            </section>
        </div>
        <div class="pad5-9 posi1 b1 bg7 border-t">
            <div class="reg-bt t-center">
                <button type="button" class="b-right" style="width: 100%;border-radius: 50px;" @click="saveFamilyInfo()">保存</button>
            </div>
        </div>

        <!-- 弹出层 -->
        <van-popup
            v-model="show"
            position="bottom"
            :style="{height: '50%'}"
            get-container = "relation"
            safe-area-inset-bottom
            >
            <div v-for="(item, index) in relationList" :key="index" @click="chooseRelation(item)" class="el-loading-text border-b pad">{{item.name}}</div>
        </van-popup>
        <!-- end -->
        <van-popup
            v-model="showCountry"
            position="bottom"
            :style="{height: '30%'}"
            get-container = "country"
            safe-area-inset-bottom
            >
            <div v-for="(item, index) in countryList" :key="index" @click="chooseCountry(item)" class="el-loading-text border-b pad">{{item.name}}</div>
        </van-popup>
        <van-popup
            v-model="showMarry"
            position="bottom"
            :style="{height: '30%'}"
            get-container = "marry"
            safe-area-inset-bottom
            >
            <div v-for="(item, index) in marriageList" :key="index" @click="chooseMarry(item)" class="el-loading-text border-b pad">{{item.name}}</div>
        </van-popup>
        <van-popup
            v-model="showCertype"
            position="bottom"
            :style="{height: '50%'}"
            get-container = "certype"
            safe-area-inset-bottom
            >
            <div v-for="(item, index) in idtypeList" :key="index" @click="chooseCertype(item)" class="el-loading-text border-b pad">{{item.name}}</div>
        </van-popup>
        <!-- 出生日期 -->
        <van-popup
            v-model="currentDateShow"
            position="bottom"
            :style="{height:'50%'}"
        >
            <van-datetime-picker
                @confirm="confirm"
                @cancel="currentDateShow = false"
                v-model="currentDate"
                type="date"
                title="选择年月日"
                :max-date="maxDate"
                :formatter="formatter"
            />
        </van-popup>
        <!-- 证件有效期止期 -->
        <van-popup
            v-model="endDateShow"
            position="bottom"
            :style="{height:'50%'}"
        >
            <van-datetime-picker
                @confirm="confirm"
                @cancel="endDateShow = false"
                v-model="currentDate"
                type="date"
                title="选择年月日"
                :formatter="formatter"
            />
        </van-popup>

        <van-popup
            v-model="cerValidDateTypeShow"
            position="bottom"
            :style="{height: '14%'}"
            get-container = "cerValidDateType"
            safe-area-inset-bottom
            >
            <div v-for="(item, index) in dateTypeList" :key="index" @click="chooseDateType(item)" class="el-loading-text border-b pad">{{item.name}}</div>
        </van-popup>
    </div>
</template>
<script>
    import Vue from 'vue'
    import { mapGetters } from 'vuex'
    import * as tool from '@/common/Tool'
    import { api_sell } from '@/api/index'
    import DataSource from '@/common/DataSource'
    import Vd from '@/common/Validator'
    import '@vant/touch-emulator'
    import { Popup, DatetimePicker } from 'vant'

    Vue.use(Popup)
    Vue.use(DatetimePicker)

    export default {
        name: "AddFamily",
        data () {
            return {
                clientId: this.$route.params.q,
                clientNewId: this.$route.params.r,
                familyList: [],
                relationList: [],
                countryList: [],
                marriageList: [],
                idtypeList: [],
                dateTypeList: [
                    {
                        name: "长期",
                        value: "0"
                    },
                    {
                        name: "非长期",
                        value: "1"
                    }
                ],
                masterList: [],
                show: false,
                showCountry: false,
                showMarry: false,
                showCertype: false,
                maxDate: new Date(),
                currentDate: new Date(),
                currentDateShow: false,
                cerValidDateTypeShow: false,
                isEndDate: false,
                endDateShow: false,
            }
        },
        computed: {
            ...mapGetters(['user']),
        },
        components: {

        },
        created () {
            this.getCustomerDetail();//家主本人信息
            this.queryRelation();//关系
            this.queryCountry();//国籍
            this.queryMarriage();//婚姻
            this.queryIdtype();//证件类型
        },
        methods: {
            getCustomerDetail () {
                const _data = {
                    saasId: tool.app.saasId,
                    clientId: this.clientId
                }
                api_sell.getCustomerDetail(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.masterList = data.customerDetail;
                    }
                })
            },

            queryRelation () {
                const _data = {type: 'cus_relation/' + tool.app.platformCode + '/' + tool.app.saasId}
                api_sell.sysDict(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.relationList = data.params.dicts;
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            queryCountry () {
                const _data = {type: 'cbs_country/' + tool.app.platformCode + '/' + tool.app.saasId}
                api_sell.sysDict(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.countryList = data.params.dicts;
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            queryMarriage () {
                const _data = {type: 'cbs_marriage/' + tool.app.platformCode + '/' + tool.app.saasId}
                api_sell.sysDict(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.marriageList = data.params.dicts;
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            queryIdtype () {
                const _data = {type: 'cbs_idtype/' + tool.app.platformCode + '/' + tool.app.saasId}
                api_sell.sysDict(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.idtypeList = data.params.dicts;
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            showPopup () {
                this.show = true;
            },
            showCountryPopup () {
                this.showCountry = true;
            },
            showMarryPopup () {
                this.showMarry = true;
            },
            showCertypePopup () {
                this.showCertype = true;
            },
            showDate (type) {
                this.currentDateShow = true;
                this.confirmType = type;
            },
            showDateType () {
                this.cerValidDateTypeShow = true;
            },
            showEndDate (type) {
                this.endDateShow = true;
                this.confirmType = type;
            },

            chooseRelation (item) {
                this.familyList.relationFlag = item.value;
                this.familyList.relationName = item.name;
                this.show = false;
            },
            chooseCountry (item) {
                this.familyList.nationality = item.value;
                this.familyList.countryName = item.name;
                this.showCountry = false;
            },
            chooseMarry (item) {
                this.familyList.marriage = item.value;
                this.familyList.marryName = item.name;
                this.showMarry = false;
            },
            chooseCertype (item) {
                this.familyList.cerType = item.value;
                this.familyList.cerTypeName = item.name;
                this.showCertype = false;
            },
            chooseDateType (item) {
                this.familyList.cerValidDateType = item.value;
                this.familyList.cerValidDateTypeName = item.name;
                this.cerValidDateTypeShow = false;
                if (item.value == '1') {
                    this.isEndDate = true;
                } else {
                    this.isEndDate = false;
                }
            },
            chooseMan () {
                this.familyList.sex = "1";
            },
            chooseWoman () {
                this.familyList.sex = "0";
            },
            confirm(val) {
                let year = val.getFullYear()
                let month = val.getMonth() + 1
                let day = val.getDate()
                if (month >= 1 && month <= 9) { month = `0${month}` }
                if (day >= 1 && day <= 9) { day = `0${day}` }
                let value = `${year}-${month}-${day}`
                if(this.confirmType == 'birthday'){
                    this.familyList.birthday = value;
                }else if(this.confirmType == 'endDate'){
                    this.familyList.cerValidDate = value;
                }
                this.currentDateShow = false;
                this.endDateShow = false;

                // 计算年龄
                let returnAge;
                let strBirthdayArr = this.familyList.birthday.split("-");
                let birthYear = strBirthdayArr[0];
                let birthMonth = strBirthdayArr[1];
                let birthDay = strBirthdayArr[2];

                let d = new Date();
                let nowYear = d.getFullYear();
                let nowMonth = d.getMonth() + 1;
                let nowDay = d.getDate();

                if(nowYear == birthYear){
                    returnAge = 0;//同年 则为0岁
                }else{
                    let ageDiff = nowYear - birthYear; //年之差
                    if(ageDiff > 0){
                        if(nowMonth == birthMonth){
                            let dayDiff = nowDay - birthDay;//日之差
                            if(dayDiff < 0){
                                returnAge = ageDiff - 1;
                            }else{
                                returnAge = ageDiff ;
                            }
                        }else{
                            let monthDiff = nowMonth - birthMonth;//月之差
                            if(monthDiff < 0){
                                returnAge = ageDiff - 1;
                            }else{
                                returnAge = ageDiff ;
                            }
                        }
                    }else{
                        returnAge = -1;//返回-1 表示出生日期输入错误 晚于今天
                    }
                }
                this.familyList.age = returnAge;
                return returnAge;//返回周岁年龄
            },
            formatter(type, value) {
                if (type === 'year') {
                    return `${value}年`
                } else if (type === 'month') {
                    return `${value}月`
                } else if (type === 'day') {
                    return `${value}日`
                }
                return value
            },

            saveFamilyInfo () {
                if (Vd.required(this.familyList.relationFlag, '请选择家庭成员与您的关系')
                    &&Vd.required(this.familyList.name, '请输入家庭成员姓名') && Vd.name(this.familyList.name, '您输入的姓名不符合规则')
                    &&Vd.required(this.familyList.mobile, '请输入家庭成员手机号码') && Vd.mobile(this.familyList.mobile, '请输入正确家庭成员手机号码')
                    &&Vd.required(this.familyList.sex, '请选择家庭成员的性别')
                    &&Vd.required(this.familyList.birthday, '请选择家庭成员的出生日期')
                    &&Vd.required(this.familyList.nationality, '请选择家庭成员的国籍')
                    &&Vd.required(this.familyList.marriage, '请选择家庭成员的婚姻')
                    &&Vd.required(this.familyList.cerValidDateType, '请选择家庭成员的证件有效期类型')
                    // &&Vd.required(this.familyList.cerValidDate, '请选择家庭成员的证件有效期止期')
                    &&Vd.required(this.familyList.cerType, '请选择家庭成员的证件类型')
                    &&Vd.required(this.familyList.cerCode, '请输入家庭成员身份证件号') && Vd.idcard(this.familyList.cerCode, '您输入的身份证号不符合规则')) {
                    const _data = {
                        agentCode: this.user.userInfo.agentcode,
                        saasId: tool.app.saasId,
                        masterCerType: this.masterList.cerType,
                        masterCerCode: this.masterList.cerCode,
                        masterName: this.masterList.cname,
                        relationFlag: this.familyList.relationFlag,
                        name: this.familyList.name,
                        sex: this.familyList.sex,
                        mobile: this.familyList.mobile,
                        birthday: this.familyList.birthday,
                        age: this.familyList.age,
                        nationality: this.familyList.nationality,
                        marriage: this.familyList.marriage,
                        cerType: this.familyList.cerType,
                        cerValidDateType: this.familyList.cerValidDateType,
                        cerValidDate: this.familyList.cerValidDateType == '1' ? this.familyList.cerValidDate : '',
                        cerCode: this.familyList.cerCode
                    }
                    api_sell.addFamilyMember(_data).then(data => {
                        if (data.status == tool.rtCode.status) {
                            tool.toastMessage(data.message)
                            // this.$router.push({ path: '/customerDetail/' + item.clientId + '/' + item.clientNewId});
                            this.$router.go(-1);
                        } else {
                            tool.toastMessage(data.message, 'error');
                        }
                    })
                }
            },

            goBack () {
                this.$router.go(-1);
            },

        }
    }
</script>
<style scoped>

</style>
