<template>
  <div class="bg3">
    <div class="fun-top-panel bg7  ">
      <span class="mess-back " @click="goBack"><div class="cont"></div></span>
      <span class="title c3 f3 dblock2 t-center ">{{topTitle}}</span>
    </div>
    <div v-show="!editStatus">
      <div class="main-container mar1  bot1 clearfix">
        <van-collapse v-model="activeName" accordion>
          <van-collapse-item class="mar3-2" v-for="(item, index) in replyList" :key="index" :title="item.categoryName" :name="index">
            <div class="mar6-1 pad4-1" v-for="(cont, ind) in item.replyContent" :key="'cont-' + ind" :class="item.replyContent.length-1 !== ind ? 'border-b1' : ''">
              <div v-if="cont.content">
                <p class="f2 c5">{{cont.content}}</p>
                <div class="t-right mar3">
                  <button class="ek-btn-3 min-w f1" @click="editContent(item, cont)">编辑</button>
                  <button class="ek-btn-4 min-w f1 mar5-2" @click="sendReply(cont)">发送</button>
                </div>
              </div>
            </div>
          </van-collapse-item>
        </van-collapse>
        <van-empty v-if="replyList.length === 0" description="暂无快捷回复消息" />
      </div>
      <div class="icon-add c-p" title="新建" @click="handleChangeEditStatus"></div>
    </div>

    <div v-show="editStatus">
      <div class="main-container mar1  bot1 clearfix">
        <section class=" mar3-2 bg7">
          <h3 class="pad5-9 f3">选择分组</h3>
          <section class="mar6-2 clearfix">
            <div class="b-radius3  bg3 mar7-3 ">
              <div class="c5 f3-1 pad5-3 arrow-s" @click="groupStatus = true">{{groupTitle}}</div>
            </div>
          </section>
        </section>
        <section class=" pad6-1 bg7">
          <h3 class="pad5-9 f3  clearfix">编辑内容<span class="f2 c8 f-right" @click="soltCustomer"><b class="fun-icon icon-insert"></b>插入客户昵称</span></h3>
          <section class="mar6 clearfix">
            <textarea class="ca-input96 f3-1" placeholder="可输入详细内容" v-model="content"></textarea>
          </section>
        </section>
      </div>
      <div class="posi5 pad5-8  ">
        <button type="button" class="hx-bt3 t-center" @click="handleEditSave">保存</button>
      </div>
      <van-action-sheet v-model="groupStatus" title="选择分组">
        <div class="group-box">
          <div class="group-content g1" v-for="(item, index) in groupList" :key="'g-'+index" @click="handleGroupTitle(item)">{{item.categoryName}}</div>
          <div class="group-content new" @click="handleIsNew">+ 新建分组</div>
        </div>
      </van-action-sheet>
      <div class="tab-diy bg7" v-show="isNew" style="z-index: 24;">
        <div class="cont">
          <div class="input-box flex-center">
            <input type="text" class="ca-input3 t-right" maxlength="8" placeholder="请输入" v-model="newGroupMessage" @input="selfInput('input',$event.target.value)" >
            <div><span class="c8">{{selfLength}}</span>/8字</div>
          </div>
          <div class="txt f3 c8 t-center c-p" @click="confirmGroupAdd">确认</div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  import Vue from 'vue'
  import { mapGetters } from 'vuex'
  import { Collapse, CollapseItem, Empty, ActionSheet } from 'vant'
  import { api_mess } from '@/api/index'
  import * as tool from '@/common/Tool'
  import Vd from '@/common/Validator'

  Vue.use(Collapse).use(CollapseItem).use(Empty).use(ActionSheet)


  export default {
    name: "FastReply",
    data () {
      return {
        activeName: 0,
        topTitle: '快捷回复',
        replyList: [],
        editStatus: false, // 快捷回复和编辑页面展示
        groupList: [],
        groupStatus: false, // 展示分组列表
        isNew: false, // 展示新增分组
        selfLength: 0, // 新增分组长度
        newGroupMessage: '', // 新增分组名称
        groupTitle: '请选择分组',
        groupId: '',
        content: '',
        edit: false, // 是否是从快捷回复页面编辑按钮修改
        contentId: '', // 快捷回复页面编辑按钮修改contentId
        categoryId: '' // 快捷回复页面编辑按钮修改categoryId
      }
    },
    computed: {
      ...mapGetters(['user']),
    },
    beforeCreate: function() {
      document.getElementsByTagName("body")[0].className = "bg3";
    },
    created () {
      this.getFastReplyList()
      this.getFirstLevelList()
    },
    methods: {
      getFastReplyList (type) {
        const _data = {
          saasId: tool.app.saasId,
          userId: this.user.userInfo.userId || ''
        }
        api_mess.funUserQuickContentGetList(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.replyList = data.funUserReplyContentDTOList
            if (type === 'edit') {
              this.groupTitle = '请选择分组'
              this.content = ''
              this.editStatus = false
              this.groupId = ''
              this.topTitle = '快捷回复'
            }
          } else {
            tool.toastMessage(data.message, 'error')
          }
        })
      },
      getFirstLevelList (type) {
        const _data = {
          saasId: tool.app.saasId,
          userId: this.user.userInfo.userId || ''
        }
        api_mess.getFirstLevelList(_data).then(data => {
          if (data.status === tool.rtCode.status) {
            this.groupList = data.funUserContentDTOList
            if (type === 'add') {
              this.groupStatus = true
            }
          } else {
            tool.toastMessage(data.message, 'error')
          }
        })
      },
      editContent (item, cont) { // 编辑
        this.groupTitle = item.categoryName
        this.content = cont.content
        this.edit = true
        this.contentId = cont.contentId
        this.categoryId = item.categoryId
        this.editStatus = true
      },
      handleChangeEditStatus () {
        this.editStatus = true
        this.topTitle = '新建回复'
      },
      handleEditSave () {
        this.groupId = 0
        this.confirmGroupEdit()
      },
      handleIsNew () {
        this.content = ''
        this.groupStatus = false
        this.isNew = true
      },
      selfInput (type, value) {
        this.selfLength = value.length
      },
      handleGroupTitle (item) {
        this.groupTitle = item.categoryName
        this.groupId = item.parentId
        this.groupStatus = false
      },
      confirmGroupAdd () {
        if (Vd.required(this.newGroupMessage, '请输入分组名称')) {
          const _data = {
            categoryLevel: 1,
            saasId: tool.app.saasId,
            content: this.content,
            parentId: 0,
            categoryName: this.newGroupMessage,
            userId: this.user.userInfo.userId || ''
          }
          api_mess.funUserQuickContentAddContent(_data).then(data => {
            if (data.status === tool.rtCode.status) {
              this.getFirstLevelList('add')
            } else {
              tool.toastMessage(data.message, 'error')
            }
          })
        }
      },
      confirmGroupEdit () {
        if (Vd.required(this.groupTitle, '请选择分组')
          && Vd.required(this.content, '请填写内容')) {
          if (this.groupTitle === '请选择分组') {
            return tool.toastMessage('请选择分组', 'error')
          }
          if (this.edit) { //编辑过来的
            const _data = {
              contentId: this.contentId,
              categoryId: this.categoryId,
              content: this.content,
              parentId: 0,
              categoryLevel: 1,
              categoryName: this.groupTitle,
              userId: this.user.userInfo.userId || ''
            }
            api_mess.funUserQuickContentUpdateContent(_data).then(data => {
              if (data.status === tool.rtCode.status) {
                this.getFastReplyList('edit')
              } else {
                tool.toastMessage(data.message, 'error')
              }
            })
          } else {
            const _data = {
              categoryLevel: 1,
              saasId: tool.app.saasId,
              content: this.content,
              parentId: this.groupId,
              categoryName: this.groupTitle,
              userId: this.user.userInfo.userId || ''
            }
            api_mess.funUserQuickContentAddContent(_data).then(data => {
              if (data.status === tool.rtCode.status) {
                this.getFastReplyList('edit')
              } else {
                tool.toastMessage(data.message, 'error')
              }
            })
          }
        }
      },
      soltCustomer () {
        this.content = '客户昵称，您好。' + this.content
      },
      sendReply (cont) {
        this.$emit('sendFastReply', cont)
      },
      goBack () {
        if (this.editStatus === false) {
          this.$emit('sendFastReply')
        } else {
          this.editStatus = false
        }
      },
    },
    beforeDestroy: function() {
      document.body.removeAttribute("class", "bg3")
    },
  }
</script>

<style scoped>
  .group-box {max-height: 200px;overflow-y: scroll;}
  .group-content{text-align: center;height: 46px;line-height: 46px;font-size: 14px;}
  .group-content.g1{border-bottom: 1px solid #eee;}
  .group-content.new{color: #FD5147; font-size: 16px;}
</style>
