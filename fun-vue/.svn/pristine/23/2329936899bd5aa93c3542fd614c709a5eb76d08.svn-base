<template>
    <div class="bg3">
        <div class="fun-top-panel  bg7 ">
            <span class="mess-back " @click="goBack()"><div class="cont"></div></span>
            <span class="title c6 f4 dblock2 t-center ">家庭成员</span>
        </div>

        <div class="main-container mar1  clearfix">
            <div class="mar3-2">
                <section class=" bg7 pad5-3">
                    <div class="f2 t-center c4 mar7-2"><b class="fun-icon icon-l"></b>已选标签<b class="fun-icon icon-r"></b></div>
                    <div class="fun-info-b1">
                        <section class="floor2" style="display: inline;">
                            <span class="posi2 " style="padding: 5px 10px;" v-for="(item, index) in customerTagsSelectedList" :key="index">{{item.tagName}}<b class="cls c-p" title="关闭" @click="delLabel()"></b></span>
                            <span class="edit c-p" style="padding: 5px 10px;"><i></i>自定义</span>
                        </section>
                    </div>
                </section>

                <section class=" bg7 mar3-2 pad5-3">
                    <div class="f2 t-center c4 mar7-2"><b class="fun-icon icon-l"></b>常用标签<b class="fun-icon icon-r"></b></div>
                    <div class="c5 f2-1">客户需求</div>
                    <div class="sel-b3">
                        <label v-for="(item, index) in demand1" :key="index"><!-- 单选 -->
                            <input type="radio" name="intention" v-model="intentionRadioVal" :value="item.tagCode"  @change="getIntRadioVal"><b>{{item.tagName}}</b>
                        </label>
                        <label v-for="(item, index) in demand2" :key="index"><!-- 多选 -->
                            <input type="checkbox" name="intention" v-model="intentionCheckVal" :value="item.tagCode" ><b>{{item.tagName}}</b>
                        </label>
                    </div>

                    <div class="c5 f2-1">客户能力</div>
                    <div class="sel-b3">
                        <label v-for="(item, index) in ability1" :key="index">
                            <input type="radio" name="demand" v-model="demandRadioVal" :value="item.tagCode" @change="getDemRadioVal"><b>{{item.tagName}}</b>
                        </label>
                        <label v-for="(item, index) in ability2" :key="index">
                            <input type="checkbox" name="demand" v-model="demandCheckVal" :value="item.tagCode" ><b>{{item.tagName}}</b>
                        </label>
                    </div>

                    <div class="c5 f2-1">客户意愿</div>
                    <div class="sel-b3">
                        <label v-for="(item, index) in intention1" :key="index">
                            <input type="radio" name="ability" v-model="abilityRadioVal" :value="item.tagCode" @change="getAbiRadioVal"><b>{{item.tagName}}</b>
                        </label>
                        <label v-for="(item, index) in intention2" :key="index">
                            <input type="checkbox" name="ability" v-model="abilityCheckVal" :value="item.tagCode" ><b>{{item.tagName}}</b>
                        </label>
                    </div>
                </section>
            </div>
        </div>

        <div class="posi5 pad5-8 " @click="save()">
            <button type="button" class="hx-bt3 t-center">保存</button>
        </div>
    </div>
</template>
<script>
    import Vue from 'vue'
    import { mapGetters } from 'vuex'
    import * as tool from '@/common/Tool'
    import { api_sell } from '@/api/index'
    import DataSource from '@/common/DataSource'
    import { Popup, Picker } from 'vant'
    // import Rules from './Rules'
    // import Works from './Works'
    // import Visitor from './Visitor'
    // import Performance from './Performance'

    Vue.use(Popup)
    Vue.use(Picker)

    export default {
        name: "EditLabel",
        data () {
            return {
                clientId: this.$route.params.q,
                clientNewId: this.$route.params.r,
                customerTagsSelectedList: [],
                intention1: [],
                intention2: [],
                demand1: [],
                demand2: [],
                ability1: [],
                ability2: [],
                radioVal: [],
                intentionRadioVal: [],
                demandRadioVal: [],
                abilityRadioVal: [],
                intentionCheckVal: [],
                demandCheckVal: [],
                abilityCheckVal: [],
            }
        },
        computed: {
            ...mapGetters(['user']),
        },
        components: {
            // 'rules': Rules,
            // 'works': Works,
            // 'visitor': Visitor,
            // 'performance': Performance
        },
        created () {
            this.queryCustomerTags();
            this.getTags();
        },
        methods: {
           
            queryCustomerTags () {
                const _data = {
                    saasId: tool.app.saasId,
                    // clientNewidId: this.clientNewId
                    clientNewidId: "fb27daf7aee911ea967f6c92bf603fec"
                }
                api_sell.queryCustomerTags(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.customerTagsSelectedList = data.customerTagsSelectedDTOList;
                        // this.tagCodes = data.customerTagsSelectedDTOList;
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            getTags () {
                const _data = {
                    saasId:tool.app.saasId
                }
                api_sell.getTags(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.intention1 = data.resultTags[0].intention1;
                        this.intention2 = data.resultTags[0].intention2;

                        this.demand1 = data.resultTags[1].demand1;
                        this.demand2 = data.resultTags[1].demand2;

                        this.ability1 = data.resultTags[2].ability1;
                        this.ability2 = data.resultTags[2].ability2;

                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                });
            },

            //单选框取值
            getIntRadioVal () {
                // console.log('106   intentionRadioVal',this.intentionRadioVal)
            },
            getDemRadioVal () {
                // console.log('107   demandRadioVal',this.demandRadioVal)
            },
            getAbiRadioVal () {
                // console.log('108   abilityRadioVal',this.abilityRadioVal)
            },

            save () {
                // 单选
                console.log(this.intentionRadioVal)
                console.log(this.demandRadioVal)
                console.log(this.abilityRadioVal)

                // 多选
                console.log(this.intentionCheckVal)
                console.log(this.demandCheckVal)
                console.log(this.abilityCheckVal)
                
                // this.radioVal = this.radioVal.concat([this.intentionRadioVal]).concat([this.demandRadioVal]).concat([this.abilityRadioVal])
                // console.log('b',this.radioVal)
            },



            goBack () {
                this.$router.push({ path: '/customerDetail/' + this.clientId + '/' + this.clientNewId});
            },

            
            
            
        }
    }
</script>
<style scoped>
  
</style>