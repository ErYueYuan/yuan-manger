<template>
    <div class="bg3">
        <div class="fun-top-panel  bg7 ">
            <span class="mess-back " @click="goBack()"><div class="cont"></div></span>
            <span class="title c6 f4 dblock2 t-center ">家庭成员</span>
        </div>

        <div class="main-container mar1  clearfix">
            <div class="mar3-2">
                <section class=" bg7 pad5-3">
                    <div class="f2 t-center c4 mar7-2"><b class="fun-icon icon-l"></b>已选标签<b class="fun-icon icon-r"></b></div>
                    <div class="fun-info-b1">
                        <section class="floor2" >
                          <span class="posi2 "  v-for="(item, pindex) in customerTagsSelectedList" :key="pindex"><div>{{item.tagName}}</div><b class="cls c-p" title="关闭" @click="delLabel(item.tagCode)"></b></span>
                          <span class="posi2"  v-for="(item, index) in customTags" :key="index + 'T'"><div>{{item}}</div><b class="cls c-p" title="关闭" @click="delSelfLabel(item)"></b></span>
                          <span class="edit c-p"  @click="selfEdit()"><div><i></i>自定义</div></span>
                        </section>
                    </div>
                </section>

                <section class=" bg7 mar3-2 pad5-3">
                    <div class="f2 t-center c4 mar7-2"><b class="fun-icon icon-l"></b>常用标签<b class="fun-icon icon-r"></b></div>
                    <div class="c5 f2-1">客户需求</div>
                    <div class="sel-b3">
                        <label v-for="(item, index) in demand1" :key="index + 'A'"><!-- 单选 -->
                            <input type="radio" name="demand" :value="item.tagCode" v-model="demandRadioVal" @change="getDemRadioVal"><b>{{item.tagName}}</b>
                        </label>
                        <label v-for="(item, index) in demand2" :key="index + 'B'"><!-- 多选 -->
                            <input type="checkbox" name="demand" :value="item.tagCode" :checked="demandCheckVal.indexOf(item.tagCode) !== -1" @click="getDemCheckVal(item.tagCode, index)"><b>{{item.tagName}}</b>
                        </label>
                    </div>

                    <div class="c5 f2-1">客户能力</div>
                    <div class="sel-b3">
                        <label v-for="(item, index) in ability1" :key="index + 'C'">
                            <input type="radio" name="ability" v-model="abilityRadioVal" :value="item.tagCode" @change="getAbiRadioVal"><b>{{item.tagName}}</b>
                        </label>
                        <label v-for="(item, index) in ability2" :key="index + 'D'">
                            <input type="checkbox" name="ability" :value="item.tagCode" :checked="abilityCheckVal.indexOf(item.tagCode) !== -1" @click="getAbiCheckVal(item.tagCode, index)"><b>{{item.tagName}}</b>
                        </label>
                    </div>

                    <div class="c5 f2-1">客户意愿</div>
                    <div class="sel-b3">
                        <label v-for="(item, index) in intention1" :key="index + 'E'">
                            <input type="radio" name="intention" v-model="intentionRadioVal" :value="item.tagCode" @change="getIntRadioVal"><b>{{item.tagName}}</b>
                        </label>
                        <label v-for="(item, index) in intention2" :key="index + 'F'">
                            <input type="checkbox" name="intention" :value="item.tagCode" :checked="intentionCheckVal.indexOf(item.tagCode) !== -1" @click="getIntCheckVal(item.tagCode, index)"><b>{{item.tagName}}</b>
                        </label>
                    </div>
                </section>
            </div>
        </div>

        <div class="posi5 pad5-8 " @click="saveLabel()">
            <button type="button" class="hx-bt3 t-center">保存</button>
        </div>

        <!-- 弹出框 -->
        <van-dialog
            v-model="show"
            title="自定义标签"
            show-cancel-button
            :beforeClose="chargeBtn"
        >
        <!--输入框-->
            <van-field
                v-model="message"
                rows="1"
                autosize
                label="标签"
                type="textarea"
                placeholder="请输入标签内容"
                maxlength="8"
            />
        </van-dialog>
        <!-- end -->

        <div class="mask-layer" v-show="isSelf" @click="closed()"></div>
        <div class="tab-diy bg7" v-show="isSelf" style="z-index: 24;">
          <div class="cont">
            <div class="input-box flex-center">
              <input type="text" class="ca-input3 t-right" maxlength="8" placeholder="请输入" v-model="message" @input="selfInput('input',$event.target.value)" >
              <div><span class="c8">{{selfLength}}</span>/8字</div>
            </div>
            <div class="txt f3 c8 t-center c-p" @click="confirmEdit()">确认</div>
          </div>
      </div>

    </div>
</template>
<script>
    import Vue from 'vue'
    import { mapGetters } from 'vuex'
    import * as tool from '@/common/Tool'
    import { api_sell } from '@/api/index'
    import DataSource from '@/common/DataSource'
    import '@vant/touch-emulator'
    import { Popup, Picker, Dialog, Field } from 'vant'
    // import Rules from './Rules'
    // import Works from './Works'
    // import Visitor from './Visitor'
    // import Performance from './Performance'

    Vue.use(Popup)
    Vue.use(Picker)
    Vue.use(Dialog)
    Vue.use(Field)

    export default {
        name: "EditLabel",
        data () {
            return {
                show: false,
                message: '',
                customTags: [],


                clientId: this.$route.params.q,
                clientNewId: this.$route.params.r,
                followUpId: this.$route.params.s,//0 从画像或新增跟进记录进入，没有followUpId
                customerTagsSelectedList: [],
                demand1: [],
                demand1Tag: [], // 客户需求当前tag（第一排）
                demand2: [],
                demand2Tag: [], // 客户需求当前tag（第二排）
                ability1: [],
                ability1Tag: [], // 客户能力当前tag（第一排）
                ability2: [],
                ability2Tag: [], // 客户能力当前tag（第二排）
                intention1: [],
                intention1Tag: [], // 客户意愿当前tag（第一排）
                intention2: [],
                intention2Tag: [], // 客户意愿当前tag（第二排）
                demandRadioVal: '', // 客户需求当前 （第一排）
                demandCheckVal: [], // 客户需求当前 （第二排）
                abilityRadioVal: '', // 客户能力当前 （第一排）
                abilityCheckVal: [], // 客户能力当前 （第二排）
                intentionRadioVal: '', // 客户意愿当前（第一排）
                intentionCheckVal: [], // 客户意愿当前（第二排）
                selectedTagList: [],
                selfTag: [
                    {
                        tagName: "",
                        tagCode: ""
                    }
                ],
                isSelf: false,//自定义标签输入弹框是否展示
                selfLength: 0,
            }
        },
        computed: {
            ...mapGetters(['user']),
        },
        components: {
            // 'rules': Rules,
            // 'works': Works,
            // 'visitor': Visitor,
            // 'performance': Performance
        },
        created () {
            console.log(this.$route.params.q, this.$route.params.r, this.$route.params.s)
            // this.queryCustomerTags();
            this.getTags();
        },
        methods: {
            queryCustomerTags () {
                let that = this;
                const _data = {
                    saasId: tool.app.saasId,
                    clientNewidId: this.clientNewId
                    // clientNewidId: "fb27daf7aee911ea967f6c92bf603fec"
                }
                api_sell.queryCustomerTags(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.customerTagsSelectedList = data.customerTagsSelectedDTOList; // 获取之前所有标签
                        this.customTags = data.customTags; // 获取自定义标签
                        this.customerTagsSelectedList.forEach(function (item) {
                            that.selectedTagList.push(item.tagCode) // 获取之前所有标签tag
                        })
                        for (let it of that.selectedTagList) {
                            if (this.demand1Tag.indexOf(it) !== -1) {
                                this.demandRadioVal = it
                            } else if (this.ability1Tag.indexOf(it) !== -1) {
                                this.abilityRadioVal = it
                            } else if (this.intention1Tag.indexOf(it) !== -1) {
                                this.intentionRadioVal = it
                            } else if (this.demand2Tag.indexOf(it) !== -1) {
                                this.demandCheckVal.push(it)
                            } else if (this.ability2Tag.indexOf(it) !== -1) {
                              this.abilityCheckVal.push(it)
                            } else if (this.intention2Tag.indexOf(it) !== -1) {
                              this.intentionCheckVal.push(it)
                            }
                        }
                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                })
            },

            getTags () {
                const _data = {
                    saasId:tool.app.saasId
                }
                api_sell.getTags(_data).then(data => {
                    if (data.status == tool.rtCode.status) {
                        this.demand1 = data.resultTags[1].demand1;
                        this.demand1.map(it => {
                            this.demand1Tag.push(it.tagCode)
                        })
                        this.demand2 = data.resultTags[1].demand2;
                        this.demand2.map(it => {
                            this.demand2Tag.push(it.tagCode)
                        })

                        this.ability1 = data.resultTags[2].ability1;
                        this.ability1.map(it => {
                            this.ability1Tag.push(it.tagCode)
                        })
                        this.ability2 = data.resultTags[2].ability2;
                        this.ability2.map(it => {
                            this.ability2Tag.push(it.tagCode)
                        })

                        this.intention1 = data.resultTags[0].intention1;
                        this.intention1.map(it => {
                            this.intention1Tag.push(it.tagCode)
                        })
                        this.intention2 = data.resultTags[0].intention2;
                        this.intention2.map(it => {
                            this.intention2Tag.push(it.tagCode)
                        })
                        this.queryCustomerTags();

                    } else {
                        tool.toastMessage(data.message, 'error');
                    }
                });
            },

            //单选框取值
            getDemRadioVal () {
              let radio = 0
              for (let ind in this.selectedTagList) {
                if (this.demand1Tag.indexOf(this.selectedTagList[ind]) !== -1) {
                  radio = 1
                  this.customerTagsSelectedList.splice(ind, 1, this.demand1[this.demand1Tag.indexOf(this.demandRadioVal)])
                  this.selectedTagList.splice(ind, 1, this.demandRadioVal)
                }
              }
              setTimeout (() => {
                if (radio === 0) {
                  this.customerTagsSelectedList.push(this.demand1[this.demand1Tag.indexOf(this.demandRadioVal)])
                  this.selectedTagList.push(this.demandRadioVal)
                }
              }, 200)
            },
            getAbiRadioVal () {
              let radio = 0
              for (let ind in this.selectedTagList) {
                if (this.ability1Tag.indexOf(this.selectedTagList[ind]) !== -1) {
                  radio = 1
                  this.customerTagsSelectedList.splice(ind, 1, this.ability1[this.ability1Tag.indexOf(this.abilityRadioVal)])
                  this.selectedTagList.splice(ind, 1, this.abilityRadioVal)
                }
              }
              setTimeout (() => {
                if (radio === 0) {
                  this.customerTagsSelectedList.push(this.ability1[this.ability1Tag.indexOf(this.abilityRadioVal)])
                  this.selectedTagList.push(this.abilityRadioVal)
                }
              }, 200)
            },
            getIntRadioVal () {
              let radio = 0
              for (let ind in this.selectedTagList) {
                if (this.intention1Tag.indexOf(this.selectedTagList[ind]) !== -1) {
                  radio = 1
                  this.customerTagsSelectedList.splice(ind, 1, this.intention1[this.intention1Tag.indexOf(this.intentionRadioVal)])
                  this.selectedTagList.splice(ind, 1, this.intentionRadioVal)
                }
              }
              setTimeout (() => {
                if (radio === 0) {
                  this.customerTagsSelectedList.push(this.intention1[this.intention1Tag.indexOf(this.intentionRadioVal)])
                  this.selectedTagList.push(this.intentionRadioVal)
                }
              }, 200)
            },

            // 多选客户需求
            getDemCheckVal (val, ind) {
              let demandCheckNow = this.demandCheckVal.indexOf(val),
                demandSelectedNow = this.selectedTagList.indexOf(val)
              if (demandSelectedNow !== -1) {
                this.customerTagsSelectedList.splice(demandSelectedNow, 1)
                this.selectedTagList.splice(demandSelectedNow, 1)
              } else {
                this.customerTagsSelectedList.push(this.demand2[ind])
                this.selectedTagList.push(val)
              }
              if (demandCheckNow !== -1) {
                this.demandCheckVal.splice(demandCheckNow, 1)
              } else {
                this.demandCheckVal.push(val)
              }
            },
            // 多选客户能力
            getAbiCheckVal (val, ind) {
              let abilityCheckNow = this.abilityCheckVal.indexOf(val),
                abilitySelectedNow = this.selectedTagList.indexOf(val)
              if (abilitySelectedNow !== -1) {
                this.customerTagsSelectedList.splice(abilitySelectedNow, 1)
                this.selectedTagList.splice(abilitySelectedNow, 1)
              } else {
                this.customerTagsSelectedList.push(this.ability2[ind])
                this.selectedTagList.push(val)
              }
              if (abilityCheckNow !== -1) {
                this.abilityCheckVal.splice(abilityCheckNow, 1)
              } else {
                this.abilityCheckVal.push(val)
              }
            },
            // 多选客户意愿
            getIntCheckVal (val, ind) {
              let intentionCheckNow = this.intentionCheckVal.indexOf(val),
                intentionSelectedNow = this.selectedTagList.indexOf(val)
              if (intentionSelectedNow !== -1) {
                this.customerTagsSelectedList.splice(intentionSelectedNow, 1)
                this.selectedTagList.splice(intentionSelectedNow, 1)
              } else {
                this.customerTagsSelectedList.push(this.intention2[ind])
                this.selectedTagList.push(val)
              }
              if (intentionCheckNow !== -1) {
                this.intentionCheckVal.splice(intentionCheckNow, 1)
              } else {
                this.intentionCheckVal.push(val)
              }
            },
            //删除
            delLabel (tagCode) {
              let selectedTagNow = this.selectedTagList.indexOf(tagCode),
                demandCheckNow = this.demandCheckVal.indexOf(tagCode),
                abilityCheckNow = this.abilityCheckVal.indexOf(tagCode),
                intentionCheckNow = this.intentionCheckVal.indexOf(tagCode)
              this.customerTagsSelectedList.splice(selectedTagNow, 1)
              this.selectedTagList.splice(selectedTagNow, 1)
              if (this.demandRadioVal === tagCode) {
                this.demandRadioVal = ''
              } else if (this.abilityRadioVal === tagCode) {
                this.abilityRadioVal = ''
              } else if (this.intentionRadioVal === tagCode) {
                this.intentionRadioVal = ''
              } else if (demandCheckNow !== -1) {
                this.demandCheckVal.splice(demandCheckNow, 1)
              } else if (abilityCheckNow !== -1) {
                this.abilityCheckVal.splice(abilityCheckNow, 1)
              } else if (intentionCheckNow !== -1) {
                this.intentionCheckVal.splice(intentionCheckNow, 1)
              }
            },

            // 删除自定义标签
            delSelfLabel (item) {
                let newArraySelf = [];
                for (let j=0;j<this.customTags.length;j++) {
                  if (this.customTags[j] == item) {
                    let customTagsCheckNow = this.customTags.indexOf(item);
                    this.customTags.splice(customTagsCheckNow, 1)
                  }
                    // if (this.customTags[j] != item) {
                    //     newArraySelf.push(this.customTags[j])
                    //     this.customTags = newArraySelf;
                    // }
                }
            },

            selfEdit () {
              // this.show = true;
              this.isSelf = true;
              this.message = "";
              this.selfLength = 0;
            },

            confirmEdit () {
              this.isSelf = false;
              this.customTags.push(this.message);
            },

            chargeBtn (action, done) {
              console.log(done)
                if(action === 'cancel'){
                    done();
                }else if(action === 'confirm'){
                    this.show = false;
                    this.customTags.push(this.message);
                }
                this.message='';
                done();
            },

            saveLabel () {
              console.log(this.selectedTagList)
              // return
              const _data = {
                followUpId: this.followUpId == '0' ? "" : this.followUpId,
                saasId: tool.app.saasId,
                tagCodes: this.selectedTagList,
                customTags: this.customTags,
                clientNewidId: this.clientNewId,//this.clientId
              }
              api_sell.editCustomerTags(_data).then(data => {
                if (data.status == tool.rtCode.status) {
                  this.$router.push({ path: '/customerDetail/' + this.clientId + '/' + this.clientNewId});
                } else {
                  tool.toastMessage(data.message, 'error');
                }
              })
            },

            // isSelf () {
            //   this.isSelf = false;
            // },

            selfInput (type, value) {
              this.selfLength = value.length;
            },

            closed () {
              this.isSelf = false;
              this.message = "";
            },

            goBack () {
              this.$router.push({ path: '/customerDetail/' + this.clientId + '/' + this.clientNewId});
            },




        }
    }
</script>
<style scoped>

</style>
